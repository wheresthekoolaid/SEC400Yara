#!/bin/bash


##Gui System for Sec440 Makes ease of Use for yara##
##Created by Conrad Wells, Lucas Beinvenue, Matthew lantagne##

##Welcome Message##
function main {
echo "############################"
echo "Yara Interface For SysAdmins"
echo "############################"
echo ""

echo "########################################"
echo "This Program Utilizes a Menu System and"
echo "Can be Navigated With the Number Keys."
echo ""
echo "Ensuring Packages Insalled"
echo "########################################"
echo ""

##Checks if winexe is installed##
##If no prompts user to install it##
echo "############################"
echo "Checking for winexe pkg"
echo "############################"
if ! dpkg -s winexe  > /dev/null; then
	clear
	echo -e "Command not found! Install? (y/n) \c"
	read $InstallPkg
	if [[ "$Installpkg" -eq "y" ]] ;then
		wget http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40-testing/xUbuntu_12.04/amd64/winexe_1.00.1-1_amd64.deb
		sudo dpkg --install winexe_1.00.1-1_amd64.deb
   	fi
fi

echo ""
echo "####################"
echo "All Packages Present"
echo "####################"

clear
MainMenu
}

function MainMenu (){
while true
do

##Resetting Triggers Variables##
trigger=""
chron="3"
emailt=""
customT=""

##First Menu##
echo "#########################"
echo "Target System Is:"
echo "1. Linux System"
echo "2. Windows System"
echo "3. exit Program"
echo "#########################"

read Opt



##Switchcase for Opt

case "$Opt" in
        1)
                clear
                LinuxSystem
        ;;
        2)
                clear
                WindowsSystem

        ;;
        3)
                exit
        ;;
	*)
		echo "Invalid Opperator"
	;;
esac

##Reset To Clear Screen

echo ""

echo "Press Key to continue"

read ResetKey

clear

done
}


##########################
##LINUX SYSTEM INTERFACE##
##########################
function LinuxSystem () {
trigger="Linux"
echo "###########################"
echo "Yara For Linux System (SSH)"
echo "###########################"

echo ""
echo "Target System IPaddress or Hostname:"
read target
echo "System Username:"
read Uname
##Reset To Clear Screen
echo "Press Key to continue"
read ResetKey
clear

##Move To Options##
ScannerStyle
}

############################
##Windows SYSTEM INTERFACE##
############################
function WindowsSystem () {
trigger="Windows"
echo "################################"
echo "Yara For Windows System (WinExe)"
echo "################################"

echo ""
echo "Target System IPaddress or Hostname:"
read target
echo "System Username:"
read Uname
echo "Domain:"
read domain

##Reset To Clear Screen
echo "Press Key to continue"
read ResetKey
clear

##Move To Options##
ScannerStyle
}


#########################
##Scanner Style Handler##
#########################
function ScannerStyle (){
echo "#########################"
echo "Yara Options"
echo "1. Run Scan Now"
echo "2. Create Chron Job (Linux Requires Root)"
echo "3. Exit to Main Menu"
echo "#########################"
read Opt

##Switchcase for Opt
case "$Opt" in
        1)
		clear
		cron="n"
		CcSsnScan
        ;;
        2)
                clear
		cron="y"
                ChronJob

        ;;
        3)
                clear
		MainMenu
        ;;
        *)
                echo "Invalid Opperator"
        ;;
esac
}

#####################
##Chron Job Handler##
#####################
function ChronJob () {
if  [ "$trigger" == "Windows" ]; then
	CcSsnScan
fi
echo "#################################################################"
echo "Daily Scanner Choice"
echo "1. CC and SSN Scan"
echo "2. Custom Rule (Future Implimentation, Current Routes to Inavlid)"
echo "3. Exit to Main Menu"
echo "################################################################"
read Opt

##Switchcase for Opt
case "$Opt" in
        1)
		echo "Time in Cron Format for linux:"
		echo "(Minute) (hour) (Day of month) (Day of week) (year)"
		echo "enter minute:"
		read TimeoScanmin
		echo "enter hour:"
		read TimeoScanhour
		echo "enter month:"
		read TimeoScanmonth
		echo "enter week:"
		read TimeoScanweek
		echo "enter year:"
		read TimeoScanyear
        	CcSsnScan
	;;
        3)
                clear
                MainMenu
        ;;
        *)
                echo "Invalid Opperator"
        ;;
esac
}

#############################################
##Run CcSsnScan This is going to look Nasty##
#############################################

function CcSsnScan () {
##If Statement for Windows or Linux System
##breaks from there to either make a chron job/scheduled task or just run scan.

if [ "$trigger" == "Linux" ]; then
	if [ "$cron" == "y" ]; then
		#Linux task Modules
		LinuxTaskModule
	else
		##Linux Regular Scan
		LinuxScanModule
	fi
else
	if [ "$cron" == "y" ]; then

		##Windows scheduled task
		WindowsTaskModule
	else
		##windows regular scan
		WindowsScanModule
	fi
fi
}
function LinuxTaskModule () {
echo "LinuxTaskModule"
}

function LinuxScanModule () {

#######################################
##Opening SSH Session Running Command##
#######################################
yaratest=$(ssh $Uname@$target dpkg-query -W -f='${Status}' 'yara' 2>/dev/null | grep -c "ok installed")



if [ $yaratest -eq 0 ];

then

  ssh -t $Uname@$target sudo apt-get install yara

  echo "installing yara"

else

    echo "yara installed"

fi

 

ssh $Uname@$target 'bash -s'<<'LinuxScanSesh'

if ! dpkg -s yara  > /dev/null; then
	apt-get install yara
fi

mkdir yara
echo "
rule CCNum_Found
{
        strings:
                \$a =/4[0-9]{15}|4[0-9]{12}/ //Visa
                \$b =/5[1-5][0-9]{14}/ //Mastercard
                \$c =/34[0-9]{13}|(37)[0-9]{13}/ //American Express
                \$d =/30[0-5][0-9]{11}|368[0-9]{12}/ //Diners Club
                \$e =/6011[0-9]{12}|65[0-9]{14}/ //Discover
                \$f =/2131[0-9]{11}|1800[0-9]{11}|(35[0-9]{14})/ //JCB

        condition:
                any of them //Check if any of these are true
}

rule SSN_Found
{
        strings:
                \$s=/[0-9]{3}(-)[0-9]{2}(-)[0-9][0-9][0-9][0-9]/
        condition:
                \$s
}" > yara/rules.config

echo "
#Sed Filter File
##Social Security Number Blocking
s/[0-9][0-9][0-9]\-[0-9][0-9]\-[0-9][0-9][0-9][0-9]/***\-**\-****/g

##Credit Card number Hiding
s/[0-9]\{16\}/****Credit Card****/g
s/[0-9]\{15\}/****Credit Card****/g
s/[0-9]\{14\}/****Credit Card****/g
s/[0-9]\{13\}/****Credit Card****/g
" > yara/sed;

yara -s -r -w yara/rules.config / | sed -f yara/sed > yara/log.txt
LinuxScanSesh

clear

echo "#####################"
echo "Scanner Complete"
echo "1. Retrieve Log File"
echo "2. Exit to Main Menu"
echo "#####################"
read Opt

##Switchcase for Opt
case "$Opt" in
        1)
		##Scp Back To Box Retrieve File
		scp $Uname@$target:log.txt yara
        ;;
        2)
                clear
                MainMenu
        ;;
        *)
                echo "Invalid Opperator"
        ;;
esac
}

################################
##Module to Create Linux Tasks##
################################
function LinuxTaskModule() {
yaratest=$(ssh $Uname@$target dpkg-query -W -f='${Status}' 'yara' 2>/dev/null | grep -c "ok installed")



if [ $yaratest -eq 0 ];

then

  ssh -t $Uname@$target 'sudo apt-get install yara'

  echo "installing yara"

else

    echo "yara installed"

fi


ssh $Uname@$target "bash -s $Uname $TimeoScanmin $TimeoScanhour $TimeoScanmonth $TimeoScanweek $TimeoScanyear" <<'LinuxScanSesh'
mkdir yara
echo "
rule CCNum_Found
{
        strings:
                \$a =/4[0-9]{15}|4[0-9]{12}/ //Visa
                \$b =/5[1-5][0-9]{14}/ //Mastercard
                \$c =/34[0-9]{13}|(37)[0-9]{13}/ //American Express
                \$d =/30[0-5][0-9]{11}|368[0-9]{12}/ //Diners Club
                \$e =/6011[0-9]{12}|65[0-9]{14}/ //Discover
                \$f =/2131[0-9]{11}|1800[0-9]{11}|(35[0-9]{14})/ //JCB
        condition:
                any of them //Check if any of these are true
}
rule SSN_Found
{
        strings:
                \$s=/[0-9]{3}(-)[0-9]{2}(-)[0-9][0-9][0-9][0-9]/
        condition:
                \$s
}" > yara/rules.config
echo "
#Sed Filter File
##Social Security Number Blocking
s/[0-9][0-9][0-9]\-[0-9][0-9]\-[0-9][0-9][0-9][0-9]/***\-**\-****/g
##Credit Card number Hiding
s/[0-9]\{16\}/****Credit Card****/g
s/[0-9]\{15\}/****Credit Card****/g
s/[0-9]\{14\}/****Credit Card****/g
s/[0-9]\{13\}/****Credit Card****/g
" > yara/sed;

echo "
#Script for Cron job to start
yara -s -r -w yara/rules.config / | sed -f yara/sed > yara/log.txt
" > yara/Scan.sh
holder="$2"
if [ "$2" == "" ]; then
        a="*"
else
	a="$holder"
fi
holder="$3"
if [ "$3" == "" ]; then
        b="*"
else
        b="$holder"
fi
holder="$4"
if [ "$4" == "" ]; then
        c="*"
else
        c="$holder"

fi
holder="$5"
if [ "$5" == "" ]; then
	d="*"
else
        d="$holder"
fi
holder="$6"
if [ "$6" == "" ]; then
        e="*"
else
        e="$holder"
fi
echo "$b"
chmod +x /home/$1/yara/Scan.sh

##create Chron Job##
command="bash /home/$1/yara/Scan.sh"
echo "$command"
echo "$a $b $c $d $e $command" >> /etc/crontab

LinuxScanSesh
MainMenu

}

#######################
##Windows Scan Module##
#######################

function WindowsScanModule () {
##Function will Download File From GitHub on remote computer
##Then will terminate the connection
##Connection reestablished then run scan
##Github File To Be Used: https://github.com/wheresthekoolaid/SEC400Yara/blob/master/Yara_DropFile.ps1
##Future Additions Renaming Log File to Date, Should be easy PS Script Fix

winexe --user $domain\\$Uname //$target 'powershell.exe -Command ( Invoke-WebRequest -Uri "https://raw.githubusercontent.com/wheresthekoolaid/SEC400Yara/master/Yara_DropFile.ps1" -OutFIle "C:\\Yara_Drop.ps1" )'
echo "Downloaded Files"

## Command to Grab Page Invoke-WebRequest -uri "https://raw.githubusercontent.com/wheresthekoolaid/SEC400Yara/master/Yara_DropFile.ps1" -OutFile "C:\yara"
## Note May have to have exit Chars before slashes and chars
winexe --user $domain\\$Uname //$target 'powershell.exe -Command (C:\\Yara_Drop.ps1)'
echo "Going"


sleep 2
clear
MainMenu
}

#######################
##Windows Task Module##
#######################

function WindowsTaskModule () {
##Function will download file from github on remote computer
##then will Terminate the connection
##connection reestablished then run script
##Script creates schedule

winexe --user $domain\\$Uname //$target 'powershell.exe -Command ( Invoke-WebRequest -Uri "https://raw.githubusercontent.com/wheresthekoolaid/SEC400Yara/master/Windows_Yara_Scheduler"  -OutFile C:\\yaraScheduler.ps1 )'
echo "Downloaded Files Successfully"
## Command to Grab Page Invoke-WebRequest -uri "https://raw.githubusercontent.com/wheresthekoolaid/SEC400Yara/master/Windows_Yara_Scheduler" -OutFile "C:\yara"
## Note May have to have exit Chars before slashes and chars

winexe --user $domain\\$Uname //$target 'powershell.exe  -Command (C:\\yarascheduler.ps1)'
echo "Extracted Files"

winexe --user $domain\\$Uname //$target  'cmd.exe /C schtasks /create /sc daily /tn YaraScan /tr "C:\yara\run_yara"'


sleep 2
clear
MainMenu
}

clear
main

